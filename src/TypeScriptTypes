// //------------Implicit vs explicit types

// let implicitCoupon = 'pizza25';

// let explicitCoupon: string;

// explicitCoupon = 'pizza25';

// //------------Void Type
// let selectedTopping: string = 'pepperoni';

// function selectTopping(topping: string): void{
//    selectedTopping= topping; 
// }

// selectTopping('bacon');

// console.log(selectTopping);

// //------------NeverType

// function orderError(error: string): never{
//     throw new Error(error);
//     //Never return a value
// }

// orderError('Something went wrong');


// //------------ Null, undefined, strict null checks

// let coupon: string | null = 'pizza25'
// function removeCoupon(): void{
//     coupon = null;
// }

// console.log(coupon);

// removeCoupon();

// console.log(coupon);


// //-------------- Union and Literal types

// let pizzaSize: string = 'small';

// function selectSize(size: 'small'|'medium'|'large'): void{
//     pizzaSize= size;
// }

// selectSize('large');

// console.log(`Piza Size: ${pizzaSize}`);


// //--------------- Function Types

// // let sumOrder;
// //let sumOrder: Function;
// // sumOrder = (price: number, quantity: number): number=>{
// //         return price* quantity;
// // }

// let sumOrder:  (price: number, quantity: number) => number;

// sumOrder = (price, quantity)=> price* quantity;

// //let sumOrder:  (price: number, quantity: number) => number = (price, quantity)=> price* quantity;

// const sum = sumOrder(25, 2);

// console.log(`Total: ${sum}`);

// //--------------- Functions And Optional Arguments

// let sumOrder:  (price: number, quantity?: number) => number;

// sumOrder = (x, y)=> {
//     if(y){
//         return x * y;
//     }
//         return x;

// }

// const sum = sumOrder(25);

// console.log(`Total: ${sum}`);


// //--------------- Typed functions and default parameters

// let sumOrder:  (price: number, quantity?: number) => number;

// sumOrder = (x, y=1)=>  x * y;

// const sum = sumOrder(25);

// console.log(`Total: ${sum}`);

//  //--------------- Object Types
 
//  let pizza: {name: string; price: number; getName():string};

//  pizza = {
//     name: 'pepperoni',
//     price: 20,
//     getName(){return pizza.name}
//  };

// //---------------Array types and generics

// let sizes: string[];

// sizes = ['small', 'medium', 'large'];

// //Generic type

// let toppings: Array<string>;
// toppings= ['pepperoni', 'tomato', 'bacon'];


// //----------------- Typle types for arrays

// //permite que solo los tipos de datos que le pones dentro de la tupla sean los que acepta al crear el array, tambien el orden

// let pizza: [string, number];

// pizza = ['Pepperoni', 20];

// // let pizza: [string, number, boolean];
// // pizza = ['Pepperoni', 20, true];